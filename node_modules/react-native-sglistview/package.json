{
  "name": "react-native-sglistview",
  "version": "0.1.1",
  "description": "A React Native module to provide a memory efficent ListView over the native implementation",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [
    "ReactNative",
    "ListView"
  ],
  "author": {
    "name": "Shaheen Ghiassy",
    "email": "shaheen.ghiassy@gmail.com",
    "url": "http://shaheenghiassy.com"
  },
  "license": "ISC",
  "peerDependencies": {
    "react-native": ">=0.4.0"
  },
  "readme": "# React Native SGListView\n\nSGListView is a memory minded implementation of the React Native's ListView.\n\n## The Problem\n\nThe React Native team has done a tremendous job building a robust platform. One oversight, is the memory performance of their ListView implementation. When scrolling down long lists, the memory footprint increases linearly and will eventually exhaust all available memory. On a device as memory-constrained as a mobile device, this behavior can be a deal breaker for many.\n\n![Native ListView Performance](http://cl.ly/image/1E1Q2M2x1Y3F/Before.png)\nAn example of ListView performance for long lists.\n\n## The Solution\n\nSGListView resolves React Native's ListView memory problem by controlling what's being drawn to the screen and what's kept in memory. When cells are scrolled off screen, SGListView intelligently flushes their internal view and only retain the cell's existing bounding box - resulting in huge memory gains.\n\n![SGListView Performance](http://cl.ly/image/3e2y0a1C1n0K/After.png)\nAn example of SGListView performance for long lists.\n\n\n## Installation\n\nInstall via npm\n\n```\nnpm install XXX --save (to be updated)\n```\n\n## Usage\n\nSGListView was designed to be a developer-friendly drop-in replacement for ListView. Simply import the package and change references to `ListView` to `SGListView`. Nothing else. No fuss, no muss.\n\nImport SGListView\n\n```\nvar SGListView = require('SGListView');\n```\n\nChange references from `ListView` to `SGListView`.\n\nFrom:\n```\n<ListView ... />\n```\nTo:\n```\n<SGListView ... />\n```\n\nDone.\n\n## Options\n\n  * **premptiveLoading**: SGListView will dump the internal view of each cell as it goes off the screen. Conversely, when the cell comes back on the screen, we repopulate the cell with its view. If this transition happens too late in the process, the user will see a flash on screen as the cell transitions from a blank bounding box to its full view representation. SGListView prevents this from happening by preemptively loading cells before they come on screen. By default, we load 2 cells in the future before they come on screen. SGListView allows you to override the number of cells to load preemptively through the prop *premptiveLoading*. **Note**: Because of this logic, its advised not to use ListView's prop *scrollRenderAheadDistance* as they can be in conflict with one another.\n\n## FAQ\n\n### Does this approach reuse cells?\n\nUnfortunately no. Instead what SGListView does is to dump the internal view of cells as they scroll off screen, so that only a simple bounding box of the cell remains in memory.\n\n### Why do you keep cells around when they go off screen? Why don't you just remove them?\n\nWe keep cells around because we wanted SGListView to be a high-fidelity drop-in replacement for ListView - which meant sacrificing performance for compatibility.\n\nWe wanted pixel perfection between ListView and SGListView. This meant that we had to rely on ListView's underlying CSS engine to keep pixel level fidelity between ListView layouts and SGListView layouts. With flexbox styling, removing a cell from a grid can cause a reflow of all remaining cells and therefore could mess with design fidelity; keeping the bounding box resolved any and all layout concerns.\n\n### Why didn't you wrap a UICollectionView / UITableView?\n\nOne key goal for this project was to make the final solution platform independent. Using an underlying UICollectionView or UITableView would've tied the implementation to Apple and was something we worked to avoid.\n\n## Authors\n\nShaheen Ghiassy <shaheen.ghiassy@gmail.com>\n",
  "readmeFilename": "README.md",
  "gitHead": "3c0fffa5c19a95c53e2d6b238583a2f546ab9a30",
  "_id": "react-native-sglistview@0.1.1",
  "_shasum": "0dd98481e4c75cc2660257ebdf9fc21bb9a793c6",
  "_from": "react-native-sglistview@*"
}
